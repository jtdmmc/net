/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace mvi.services.interfaces.account
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TAccount : TBase
  {
    private int _Id;
    private string _Name;
    private string _Password;
    private string _CreatedAt;
    private string _UpdatedAt;
    private string _Remark;
    private bool _IsEnabled;
    private List<TRole> _Roles;

    public int Id
    {
      get
      {
        return _Id;
      }
      set
      {
        __isset.Id = true;
        this._Id = value;
      }
    }

    public string Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }

    public string Password
    {
      get
      {
        return _Password;
      }
      set
      {
        __isset.Password = true;
        this._Password = value;
      }
    }

    public string CreatedAt
    {
      get
      {
        return _CreatedAt;
      }
      set
      {
        __isset.CreatedAt = true;
        this._CreatedAt = value;
      }
    }

    public string UpdatedAt
    {
      get
      {
        return _UpdatedAt;
      }
      set
      {
        __isset.UpdatedAt = true;
        this._UpdatedAt = value;
      }
    }

    public string Remark
    {
      get
      {
        return _Remark;
      }
      set
      {
        __isset.Remark = true;
        this._Remark = value;
      }
    }

    public bool IsEnabled
    {
      get
      {
        return _IsEnabled;
      }
      set
      {
        __isset.IsEnabled = true;
        this._IsEnabled = value;
      }
    }

    public List<TRole> Roles
    {
      get
      {
        return _Roles;
      }
      set
      {
        __isset.Roles = true;
        this._Roles = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Id;
      public bool Name;
      public bool Password;
      public bool CreatedAt;
      public bool UpdatedAt;
      public bool Remark;
      public bool IsEnabled;
      public bool Roles;
    }

    public TAccount() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Password = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                CreatedAt = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                UpdatedAt = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Remark = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Bool) {
                IsEnabled = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.List) {
                {
                  Roles = new List<TRole>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    TRole _elem6;
                    _elem6 = new TRole();
                    _elem6.Read(iprot);
                    Roles.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TAccount");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.Id) {
          field.Name = "Id";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Id);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.Name) {
          field.Name = "Name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Password != null && __isset.Password) {
          field.Name = "Password";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Password);
          oprot.WriteFieldEnd();
        }
        if (CreatedAt != null && __isset.CreatedAt) {
          field.Name = "CreatedAt";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CreatedAt);
          oprot.WriteFieldEnd();
        }
        if (UpdatedAt != null && __isset.UpdatedAt) {
          field.Name = "UpdatedAt";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UpdatedAt);
          oprot.WriteFieldEnd();
        }
        if (Remark != null && __isset.Remark) {
          field.Name = "Remark";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Remark);
          oprot.WriteFieldEnd();
        }
        if (__isset.IsEnabled) {
          field.Name = "IsEnabled";
          field.Type = TType.Bool;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsEnabled);
          oprot.WriteFieldEnd();
        }
        if (Roles != null && __isset.Roles) {
          field.Name = "Roles";
          field.Type = TType.List;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Roles.Count));
            foreach (TRole _iter7 in Roles)
            {
              _iter7.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TAccount(");
      bool __first = true;
      if (__isset.Id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Name != null && __isset.Name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Password != null && __isset.Password) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Password: ");
        __sb.Append(Password);
      }
      if (CreatedAt != null && __isset.CreatedAt) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CreatedAt: ");
        __sb.Append(CreatedAt);
      }
      if (UpdatedAt != null && __isset.UpdatedAt) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UpdatedAt: ");
        __sb.Append(UpdatedAt);
      }
      if (Remark != null && __isset.Remark) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Remark: ");
        __sb.Append(Remark);
      }
      if (__isset.IsEnabled) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsEnabled: ");
        __sb.Append(IsEnabled);
      }
      if (Roles != null && __isset.Roles) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Roles: ");
        __sb.Append(Roles);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
