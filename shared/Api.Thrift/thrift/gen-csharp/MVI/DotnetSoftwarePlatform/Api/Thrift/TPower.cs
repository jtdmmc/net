/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
#if !SILVERLIGHT
using System.Xml.Serialization;
#endif
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace MVI.DotnetSoftwarePlatform.Api.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  [DataContract(Namespace="")]
  public partial class TPower : TBase
  {
    private int _PowerId;
    private string _PowerName;

    [DataMember(Order = 0)]
    public int PowerId
    {
      get
      {
        return _PowerId;
      }
      set
      {
        __isset.PowerId = true;
        this._PowerId = value;
      }
    }

    [DataMember(Order = 0)]
    public string PowerName
    {
      get
      {
        return _PowerName;
      }
      set
      {
        __isset.PowerName = true;
        this._PowerName = value;
      }
    }


    [XmlIgnore] // XmlSerializer
    [DataMember(Order = 1)]  // XmlObjectSerializer, DataContractJsonSerializer, etc.
    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    [DataContract]
    public struct Isset {
      [DataMember]
      public bool PowerId;
      [DataMember]
      public bool PowerName;
    }

    #region XmlSerializer support

    public bool ShouldSerializePowerId()
    {
      return __isset.PowerId;
    }

    public bool ShouldSerializePowerName()
    {
      return __isset.PowerName;
    }

    #endregion XmlSerializer support

    public TPower() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                PowerId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                PowerName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TPower");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.PowerId) {
          field.Name = "PowerId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(PowerId);
          oprot.WriteFieldEnd();
        }
        if (PowerName != null && __isset.PowerName) {
          field.Name = "PowerName";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PowerName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that) {
      var other = that as TPower;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.PowerId == other.__isset.PowerId) && ((!__isset.PowerId) || (System.Object.Equals(PowerId, other.PowerId))))
        && ((__isset.PowerName == other.__isset.PowerName) && ((!__isset.PowerName) || (System.Object.Equals(PowerName, other.PowerName))));
    }

    public override int GetHashCode() {
      int hashcode = 0;
      unchecked {
        hashcode = (hashcode * 397) ^ (!__isset.PowerId ? 0 : (PowerId.GetHashCode()));
        hashcode = (hashcode * 397) ^ (!__isset.PowerName ? 0 : (PowerName.GetHashCode()));
      }
      return hashcode;
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TPower(");
      bool __first = true;
      if (__isset.PowerId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PowerId: ");
        __sb.Append(PowerId);
      }
      if (PowerName != null && __isset.PowerName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PowerName: ");
        __sb.Append(PowerName);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
